code <filename> @Crea un archivo en VSCode

git clone <url> @Clona todo el repositorio de github a tu computadora

git add <filename> @Pone el archivo en una canasta para cuando se haga el commit, si un archivo no se encuntra en la canasta add, entonces no se va a hacer el commit de esos archivos

git commit -m "Mensaje" @La -m significa mensaje y en el mensaje ponemos los cambios que hicimos al documento para poder llevar un trackeo. Se puede usar git commit -am "Mensaje", la -a es de add y agreaga al add todos los archivos modificados

git stash @Es generar un commit local lo que no afecta y no crea un commit tal cual
git stash list @ Lista los stash disponibles 
git stash pop @Nos regresa los cambios guardados localmente 
git stahs drop @Elimina los stah del sistema

git push @Manda todos los cambios al servidor de github para que se actualice.
git push --set-upstream origin <branch name> @Crea el branch en github


git status @ nos da un status de lo que esta pasando con git y nuestros archivos

git pull @Con este comando jalas los archivos del servidor

git diff @nos marca las diferencias entre el último código commit y el actual


git log @Nos da una lista de todos los commits que hemos realizado en nuestro proyecto 
git reflog @Nos deja ver el historial de interacciones en nuestro git
git log --graph --decorate --all --oneline
git config --global alias.<nombre> "<lo que queramos configurar para default"


git reset <commit hash> @Resetea el archivo al commit que seleccionemos. Control de versiones
git reset --hard <commit hash> @Sirve tanto para eliminar como para recuperar commits que hemos regresado/perdido




git branch @Nos despliega la lista de branches que tenemos
git branch <branch name> @Crea una rama con ese nombre
git branch -D <branch name> @Elimina la branch que seleccionemos
git branch -m <branch name> @Renombrar una rama

git switch <branch name> @Nos mueve a la rama que seleccionemos

git checkout <file name> @Nos regresa nuestro último archivo commit de ese archivo
git checkout <branch name> @Nos mueve de branch para poder trabajar en ella
git checkout -b <branch name> @Crea una branch nueva

git merge <branch that will be merge to current one> @une los cambios de dos diferentes branches

git rm <filename> @Eliminar archivos 

code .gitignore @Nos crea un archivo gitignore con la finalidad de agregar las archivos/carpetas que queramos ignorar a la hora de hacer commits
	Para agregar nos tenemos que ir al archivo y escribir la dirección destino del directorio que 	queremos ignorar a la hora de hacer commit:
	
	**/.<Nombre de archivo/directorio>

git tag <nombre del tag> @Nos auyda a generar tags en los diferentes commits para poder identificar de mejor manera ciertos commits